local _ENV = (getgenv or getrenv or getfenv)()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local DialogueEvent = ReplicatedStorage.BetweenSides.Remotes.Events.DialogueEvent
local CombatEvent = ReplicatedStorage.BetweenSides.Remotes.Events.CombatEvent
local ToolEvent = ReplicatedStorage.BetweenSides.Remotes.Events.ToolsEvent
local QuestsNpcs = workspace.IgnoreList.Int.NPCs.Quests
local Enemys = workspace.Playability.Enemys
local QuestsDecriptions = require(ReplicatedStorage.MainModules.Essentials.QuestDescriptions)
local EnemiesFolders = {}
local CFrameAngle = CFrame.Angles(math.rad(- 90), 0, 0)


local function a()
    local QuestsList = {}
    local CurrentQuest = nil
    local CurrentLevel = - 1
    for _, QuestData in QuestsDecriptions do
        if QuestData.Goal <= 1 then
            continue
        end
        table.insert(QuestsList, {
            Level = QuestData.MinLevel,
            Target = QuestData.Target,
            NpcName = QuestData.Npc,
            Id = QuestData.Id
        })
    end
    table.sort(QuestsList, function(a, b)
        return a.Level > b.Level
    end)
    local function b()
        local Level = nil
        local success, result = pcall(function()
            local mainUI = Player.PlayerGui:FindFirstChild("MainUI")
            if mainUI then
                local mainFrame = mainUI:FindFirstChild("MainFrame")
                if mainFrame then
                    local statsFrame = mainFrame:FindFirstChild("StastisticsFrame") or mainFrame:FindFirstChild("StatisticsFrame")
                    if statsFrame then
                        local levelBG = statsFrame:FindFirstChild("LevelBackground")
                        if levelBG then
                            local levelText = levelBG:FindFirstChild("Level")
                            if levelText and levelText.Text then
                                return tonumber(levelText.Text)
                            end
                        end
                        for _, child in pairs(statsFrame:GetDescendants()) do
                            if child:IsA("TextLabel") and child.Text:match("^%d+$") then
                                local num = tonumber(child.Text)
                                if num and num >= 1 and num <= 2000 then
                                    return num
                                end
                            end
                        end
                    end
                end
            end
            return 1
        end)
        if success and result then
            Level = result
        else
            Level = 1
        end
        if Level == CurrentLevel then
            return CurrentQuest
        end
        for _, QuestData in QuestsList do
            if QuestData.Level <= Level then
                CurrentLevel, CurrentQuest = Level, QuestData
                return QuestData
            end
        end
        return nil
    end
    return b()
end

local Settings = {
    ClickV2 = false,
    TweenSpeed = 270,
    SelectedTool = "CombatType",
    BringMobDistance = 35,
    dSpeed = 0.05,
    NoClip = false,
    AutoStats = false,
    SelectedStat = "Strength"
}

local EquippedTool = nil
local CurrentTarget = nil

local conepc = _ENV.cnn or {}
_ENV.cnn = conepc

for i = 1, # conepc do
    conepc[i]:Disconnect()
end

table.clear(conepc)

local function c(Character)
    if Character then
        local Humanoid = Character:FindFirstChildOfClass("Humanoid")
        return Humanoid and Humanoid.Health > 0
    end
end

local BodyVelocity = Instance.new("BodyVelocity")
BodyVelocity.Velocity = Vector3.zero
BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
BodyVelocity.P = 1000

if _ENV.tween_bodyvelocity then
    _ENV.tween_bodyvelocity:Destroy()
end

_ENV.tween_bodyvelocity = BodyVelocity

local CanCollideObjects = {}

local function ss(Object)
    if Object:IsA("BasePart") and Object.CanCollide then
        table.insert(CanCollideObjects, Object)
    end
end

local function rrr(BasePart)
    local index = table.find(CanCollideObjects, BasePart)
    if index then
        table.remove(CanCollideObjects, index)
    end
end

local function ne(Character)
    table.clear(CanCollideObjects)
    for _, Object in Character:GetDescendants() do
        ss(Object)
    end
    Character.DescendantAdded:Connect(ss)
    Character.DescendantRemoving:Connect(rrr)
end

table.insert(conepc, Player.CharacterAdded:Connect(ne))
task.spawn(ne, Player.Character)

local function np(Character)
    if _ENV.OnFarm then
        for i = 1, # CanCollideObjects do
            CanCollideObjects[i].CanCollide = false
        end
    elseif Character.PrimaryPart and not Character.PrimaryPart.CanCollide then
        for i = 1, # CanCollideObjects do
            CanCollideObjects[i].CanCollide = true
        end
    end
end

local function upe(Character)
    local BasePart = Character:FindFirstChild("UpperTorso")
    local Humanoid = Character:FindFirstChild("Humanoid")
    local BodyVelocity = _ENV.tween_bodyvelocity
    if _ENV.OnFarm and BasePart and Humanoid and Humanoid.Health > 0 then
        if BodyVelocity.Parent ~= BasePart then
            BodyVelocity.Parent = BasePart
        end
    elseif BodyVelocity.Parent then
        BodyVelocity.Parent = nil
    end
    if BodyVelocity.Velocity ~= Vector3.zero and (not Humanoid or not Humanoid.SeatPart or not _ENV.OnFarm) then
        BodyVelocity.Velocity = Vector3.zero
    end
end

table.insert(conepc, RunService.Stepped:Connect(function()
    local Character = Player.Character
    if c(Character) then
        upe(Character)
        np(Character)
    end
end))

local TweenCreator = {}
TweenCreator.__index = TweenCreator

local tweens = {}
local EasingStyle = Enum.EasingStyle.Linear

function TweenCreator.new(obj, time, prop, value)
    local self = setmetatable({}, TweenCreator)
    self.tween = TweenService:Create(obj, TweenInfo.new(time, EasingStyle), {
        [prop] = value
    })
    self.tween:Play()
    self.value = value
    self.object = obj
    if tweens[obj] then
        tweens[obj]:destroy()
    end
    tweens[obj] = self
    return self
end

function TweenCreator:destroy()
    self.tween:Pause()
    self.tween:Destroy()
    tweens[self.object] = nil
    setmetatable(self, nil)
end

function TweenCreator:stopTween(obj)
    if obj and tweens[obj] then
        tweens[obj]:destroy()
    end
end

local function TweenStopped()
    if not BodyVelocity.Parent and c(Player.Character) then
        TweenCreator:stopTween(Player.Character:FindFirstChild("HumanoidRootPart"))
    end
end

local lastCFrame = nil
local lastTeleport = 0

local function tepe(TargetCFrame)
    while not Player.Character or not c(Player.Character) do
        task.wait(1)
        if not _ENV.OnFarm then
            return false
        end
    end
    if not Player.Character or not Player.Character.PrimaryPart then
        return false
    end
    if (tick() - lastTeleport) <= 0.3 and lastCFrame == TargetCFrame then
        return false
    end
    local Character = Player.Character
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    local PrimaryPart = Character.PrimaryPart
    if not Humanoid or not PrimaryPart then
        return false
    end
    if Humanoid.Sit then
        Humanoid.Sit = false
        task.wait(0.1)
        return false
    end
    lastTeleport = tick()
    lastCFrame = TargetCFrame
    _ENV.OnFarm = true
    local teleportPosition = TargetCFrame.Position
    local currentPosition = PrimaryPart.Position
    local Distance = (currentPosition - teleportPosition).Magnitude
    if Distance < 20 then
        PrimaryPart.CFrame = TargetCFrame
        TweenCreator:stopTween(PrimaryPart)
        return true
    end
    TweenCreator:stopTween(PrimaryPart)
    local tween = TweenCreator.new(PrimaryPart, Distance / Settings.TweenSpeed, "CFrame", TargetCFrame)
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not c(Character) or not _ENV.OnFarm then
            TweenCreator:stopTween(PrimaryPart)
            if connection then
                connection:Disconnect()
            end
        end
    end)
    coroutine.wrap(function()
        while tween.tween.PlaybackState == Enum.PlaybackState.Playing do
            task.wait()
        end
        if connection then
            connection:Disconnect()
        end
    end)()
    return true
end

table.insert(conepc, BodyVelocity:GetPropertyChangedSignal("Parent"):Connect(TweenStopped))

local CurrentTime = workspace:GetServerTimeNow()

local function d()
    if not c(Player.Character) then
        return
    end
    local Tool = Player.Character:FindFirstChildOfClass("Tool")
    if not Tool then
        return
    end
    CurrentTime = workspace:GetServerTimeNow()
    pcall(function()
        Tool:Activate()
        local Handle = Tool:FindFirstChild("Handle")
        if Handle then
            if Handle:FindFirstChild("Cooldown") then
                Handle.Cooldown.Value = 0
            end
            if Handle:FindFirstChild("AttackCooldown") then
                Handle.AttackCooldown.Value = 0
            end
            if Handle:FindFirstChild("Debounce") then
                Handle.Debounce.Value = false
            end
            local Sound = Handle:FindFirstChildOfClass("Sound")
            if Sound then
                Sound:Play()
            end
        end
        ToolEvent:FireServer("Effects", 1)
        ToolEvent:FireServer("Activate", 1)
        if Settings.ClickV2 then
            for i = 1, 3 do
                Tool:Activate()
                task.wait(0.01)
            end
        end
    end)
end

local function faz(Enemies)
    CurrentTime = workspace:GetServerTimeNow()
    CombatEvent:FireServer("DealDamage", {
        CallTime = CurrentTime,
        DelayTime = 0,
        Combo = 1,
        Results = Enemies,
        Damage = math.random(50, 150),
        CriticalHit = math.random(1, 10) <= 3
    })
end

local function irl(Folder, EnemyName)
    local foundEnemies = {}
    for _, Enemy in pairs(Folder:GetChildren()) do
        if Enemy and Enemy.Parent then
            local enemyName = Enemy:GetAttribute("OriginalName") or Enemy:GetAttribute("EnemyName") or Enemy.Name
            if enemyName == EnemyName or string.find(enemyName, EnemyName) then
                local Humanoid = Enemy:FindFirstChild("Humanoid")
                local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
                if Humanoid and HumanoidRootPart and Humanoid.Health > 0 then
                    local isReady = true
                    if Enemy:GetAttribute("Respawned") ~= nil then
                        isReady = Enemy:GetAttribute("Respawned")
                    end
                    if Enemy:GetAttribute("Ready") ~= nil then
                        isReady = isReady and Enemy:GetAttribute("Ready")
                    end
                    if isReady then
                        table.insert(foundEnemies, Enemy)
                    end
                end
            end
        end
    end
    return foundEnemies
end

local function pgaall(EnemyName)
    local AllEnemies = {}
    local EnemyFolder = EnemiesFolders[EnemyName]
    if EnemyFolder and EnemyFolder.Parent then
        local enemies = irl(EnemyFolder, EnemyName)
        for _, enemy in ipairs(enemies) do
            table.insert(AllEnemies, enemy)
        end
    else
        if Enemys and Enemys.Parent then
            local Islands = Enemys:GetChildren()
            for i = 1, # Islands do
                local Island = Islands[i]
                if Island and Island.Parent then
                    local enemies = irl(Island, EnemyName)
                    if # enemies > 0 then
                        EnemiesFolders[EnemyName] = Island
                        for _, enemy in ipairs(enemies) do
                            table.insert(AllEnemies, enemy)
                        end
                    end
                end
            end
        end
    end
    return AllEnemies
end

local function clst(EnemyName)
    local AllEnemies = pgaall(EnemyName)
    if # AllEnemies == 0 then
        return nil
    end
    local ClosestEnemy = nil
    local ShortestDistance = math.huge
    for i, Enemy in ipairs(AllEnemies) do
        if Enemy and Enemy.Parent then
            local RootPart = Enemy:FindFirstChild("HumanoidRootPart")
            local Humanoid = Enemy:FindFirstChild("Humanoid")
            if RootPart and Humanoid and Humanoid.Health > 0 then
                local Distance = Player:DistanceFromCharacter(RootPart.Position)
                if Distance < ShortestDistance then
                    ShortestDistance = Distance
                    ClosestEnemy = Enemy
                end
            end
        end
    end
    return ClosestEnemy
end

local function brnge(EnemyName, TargetPosition)
    if not _ENV.BringMob then
        return 0
    end
    local AllEnemies = pgaall(EnemyName)
    local BroughtCount = 0
    if # AllEnemies == 0 then
        return 0
    end
    for i, Enemy in ipairs(AllEnemies) do
        if Enemy and Enemy.Parent then
            local RootPart = Enemy:FindFirstChild("HumanoidRootPart")
            local Humanoid = Enemy:FindFirstChild("Humanoid")
            if RootPart and Humanoid and Humanoid.Health > 0 then
                if not RootPart:FindFirstChild("BodyVelocity") then
                    local BV = Instance.new("BodyVelocity", RootPart)
                    BV.Velocity = Vector3.zero
                    BV.MaxForce = Vector3.one * math.huge
                end
                RootPart.CanCollide = false
                RootPart.Size = Vector3.one * Settings.BringMobDistance
                RootPart.CFrame = TargetPosition
                BroughtCount = BroughtCount + 1
            end
        end
    end
    if BroughtCount > 0 then
        pcall(sethiddenproperty, Player, "SimulationRadius", math.huge)
    end
    return BroughtCount
end

local function IsSelectedTool(Tool)
    return Tool:GetAttribute(Settings.SelectedTool)
end

local function EquipCombat(Activate)
    if not c(Player.Character) then
        return
    end
    if EquippedTool and IsSelectedTool(EquippedTool) then
        if Activate then
            if Settings.ClickV2 then
                d()
            else
                EquippedTool:Activate()
            end
        end
        if EquippedTool.Parent == Player.Backpack then
            Player.Character.Humanoid:EquipTool(EquippedTool)
        elseif EquippedTool.Parent ~= Player.Character then
            EquippedTool = nil
        end
        return
    end
    local Equipped = Player.Character:FindFirstChildOfClass("Tool")
    if Equipped and IsSelectedTool(Equipped) then
        EquippedTool = Equipped
        return
    end
    for _, Tool in Player.Backpack:GetChildren() do
        if Tool:IsA("Tool") and IsSelectedTool(Tool) then
            EquippedTool = Tool
            Player.Character.Humanoid:EquipTool(Tool)
            return
        end
    end
end

local function ten(EnemyName)
    local success, result = pcall(function()
        local QuestFrame = Player.PlayerGui.MainUI.MainFrame.CurrentQuest
        if not QuestFrame.Visible then
            return false
        end
        local questText = nil
        local goalElement = QuestFrame:FindFirstChild("Goal")
        if goalElement and goalElement.Text then
            questText = goalElement.Text
        end
        if not questText then
            for _, child in pairs(QuestFrame:GetDescendants()) do
                if child:IsA("TextLabel") and child.Text and child.Text ~= "" then
                    if string.find(child.Text, "Defeat") or string.find(child.Text, "/") then
                        questText = child.Text
                        break
                    end
                end
            end
        end
        if questText then
            local hasTargetQuest = string.find(questText, EnemyName)
            return hasTargetQuest ~= nil
        else
            return false
        end
    end)
    if success then
        return result
    else
        return false
    end
end

local function ete(QuestName, QuestId)
    local Npc = QuestsNpcs:FindFirstChild(QuestName, true)
    local RootPart = Npc and Npc.PrimaryPart
    if RootPart then
        DialogueEvent:FireServer("Quests", {
            ["NpcName"] = QuestName,
            ["QuestName"] = QuestId
        })
        tepe(RootPart.CFrame * CFrame.new(0, 0, 15))
        task.wait(2)
    end
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/jhowmodderxxxx/haxstore/refs/heads/main/savemanagerhax"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/jhowmodderxxxx/haxstore/refs/heads/main/interface"))()

local DeviceType = game:GetService("UserInputService").TouchEnabled and "Mobile" or "PC"


local UserInputService = game:GetService("UserInputService")
local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local ClickButton = Instance.new("ScreenGui")
ClickButton.Parent = PlayerGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = "LogoButton"
MainFrame.Parent = ClickButton
MainFrame.AnchorPoint = Vector2.new(1, 0)
MainFrame.BackgroundTransparency = 0.8
MainFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(1, -60, 0, 10)
MainFrame.Size = UDim2.new(0, 45, 0, 45)

local UICorner = Instance.new("UICorner")
UICorner.Parent = MainFrame

local TextButton = Instance.new("TextButton")
TextButton.Parent = MainFrame
TextButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
TextButton.BackgroundTransparency = 1
TextButton.BorderSizePixel = 0
TextButton.Size = UDim2.new(1, 0, 1, 0)
TextButton.Text = "SOWxTEAM"
TextButton.TextColor3 = Color3.fromRGB(170, 0, 255)
TextButton.TextSize = 14
TextButton.AutoButtonColor = false


local ImageLabel = Instance.new("ImageLabel")
ImageLabel.Parent = TextButton
ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageLabel.Size = UDim2.new(1, 0, 1, 0)
ImageLabel.Image = "rbxassetid://78127779035849"
ImageLabel.ZIndex = 1

TextButton.ZIndex = 2



local ModMenu = Instance.new("Frame")
ModMenu.Name = "ModMenu"
ModMenu.Parent = PlayerGui
ModMenu.AnchorPoint = Vector2.new(0.5, 0.5)
ModMenu.BackgroundTransparency = 0.8
ModMenu.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
ModMenu.BorderSizePixel = 0
ModMenu.Position = UDim2.new(0.5, 0, 0.5, 0)
ModMenu.Size = UDim2.new(0, 200, 0, 300)
ModMenu.Visible = false

local UICorner_2 = Instance.new("UICorner")
UICorner_2.Parent = ModMenu

TextButton.MouseButton1Click:Connect(function()
    ModMenu.Visible = not ModMenu.Visible
end)


if DeviceType == "Mobile" then
    MainFrame.Position = UDim2.new(1, -60, 0, 10)
else
    MainFrame.Position = UDim2.new(1, -120, 0, 10)

end



local UserInputService = game:GetService("UserInputService") 
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end


--mexer o flutuante com nome hax store no pc--
MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false
                dragging = false

                 end 
  
            end) 

       end 

  end)








--mexer o flutuante com nome hax store no mobile--
  MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input

    end 

end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)

    end 
end)


TextButton.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftAlt", false, game)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftAlt", false, game)
end)

local Window = Fluent:CreateWindow({
    Title = "SOWxTEAM",
    SubTitle = "By RodrigoGTyx | VOX SEAS | SCRIPT ATUALIZADO DIA 16/08/25",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftAlt
})

        local Tabs = {
            Main = Window:AddTab({
                Title = "Farm",
                Icon = "user",

            }),
            Misc = Window:AddTab({
                Title = "Outros",
              Icon = "navigation",
            }),
            Server = Window:AddTab({
                Title = "Server",
                Icon = "user",
                }),

                discord = Window:AddTab({
                Title = "Discord",
                 Icon = "settings"
                }),
        }


        -- Variável de altura ajustável
local FarmHeight = 7.5

-- Slider para ajustar altura do farm
Tabs.Main:AddSlider("FarmHeightSlider", {
    Title = "Altura do Player (Farm)",
    Description = "Ajusta a altura acima do inimigo durante o farm",
    Default = 7.5,
    Min = 0,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        FarmHeight = Value
    end
})



-- Sistema Auto Farm (modificado para usar a altura dinâmica)
Tabs.Main:AddSection("Auto Farm")
Tabs.Main:AddToggle("AutoFarm", {
    Title = "Auto Farm",
    Default = false,
    Callback = function(Value)
        _ENV.OnFarm = Value
        if Value then
            task.spawn(function()
                while task.wait(Settings.dSpeed) and _ENV.OnFarm do
                    if not c(Player.Character) then
                        repeat task.wait(0.5) until c(Player.Character)
                        task.wait(0.2)
                        continue
                    end

                    local CurrentQuest = a()
                    if not CurrentQuest then continue end

                    if not ten(CurrentQuest.Target) then
                        ete(CurrentQuest.NpcName, CurrentQuest.Id)
                        continue
                    end

                    local Enemy = clst(CurrentQuest.Target)
                    if not Enemy then continue end
                    CurrentTarget = Enemy

                    local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
                    local Humanoid = Enemy:FindFirstChild("Humanoid")

                    if HumanoidRootPart and Humanoid and Humanoid.Health > 0 then
                        if _ENV.BringMob then
                            brnge(CurrentQuest.Target, HumanoidRootPart.CFrame)
                        end

                        -- apenas usa a função de locomoção (sem tp instantâneo)
                        local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(0, FarmHeight, 0) * CFrameAngle
                        tepe(targetCFrame)

                        task.wait(0)

                        local AllQuestEnemies = pgaall(CurrentQuest.Target)
                        if #AllQuestEnemies > 0 then
                            faz(AllQuestEnemies)
                        end

                        d()
                    end
                end
            end)
        end
    end
})



Tabs.Main:AddToggle("BringMob", {
    Title = "Bring Mob",
    Default = false,
    Callback = function(Value)
        _ENV.BringMob = Value
    end
})


-- Lista de Bosses (caminho salvo como função para checar dinamicamente)
local BossList = {
    ["Muzzlejaw"] = function() return workspace.Playability.Enemys.Prison:FindFirstChild("Muzzlejaw81") end,
    ["Koaby"] = function() return workspace.Playability.Enemys.Prison:FindFirstChild("Koaby80") end,
    ["King Werewolf"] = function() return workspace.Playability.Enemys["Werewolf's Island"]:FindFirstChild("King Werewolf170") end,
    ["Ice King"] = function() return workspace.Playability.Enemys["Frost Island"]:FindFirstChild("Ice King53") end,
    ["Pharaoh"] = function() return workspace.Playability.Enemys["Sandstorm Island"]:FindFirstChild("Pharaoh93") end,
    ["Admiral Vulkran"] = function() return workspace.Playability.Enemys["Vulcan Island"]:FindFirstChild("Admiral Vulkran169") end,
    ["Valion Ironmaul"] = function() return workspace.Playability.Enemys.Prison:FindFirstChild("Valion Ironmaul83") end,
    ["Thunder God"] = function() return workspace.Playability.Enemys["Skypie Upper"]["Thunder God156"] end,
    ["Wysper"] = function() return workspace.Playability.Enemys["Skypie Upper"].Wysper131 end,
    ["Abandoned Experiment"] = function() return workspace.Playability.Enemys.Fountain["Abandoned Experiment20"] end,
    ["EX-77 Ironfist"] = function() return workspace.Playability.Enemys.Fountain["EX-77 Ironfist19"] end
}

local SelectedBoss = nil

-- Dropdown para escolher Boss
Tabs.Main:AddSection("Auto Farm Boss")
Tabs.Main:AddDropdown("BossDropdown", {
    Title = "Selecionar Boss",
    Values = {"Muzzlejaw", "Koaby", "King Werewolf", "Ice King", "Pharaoh", "Admiral Vulkran", "Valion Ironmaul", "Thunder God", "Wysper", "Abandoned Experiment", "EX-77 Ironfist"},
    Default = nil,
    Callback = function(Value)
        SelectedBoss = Value
    end
})

-- Toggle Auto Farm Boss
Tabs.Main:AddToggle("AutoFarmBoss", {
    Title = "Auto Farm Boss",
    Default = false,
    Callback = function(Value)
        _ENV.OnFarmBoss = Value
        if Value then
            task.spawn(function()
                while task.wait(Settings.dSpeed) and _ENV.OnFarmBoss do
                    if not SelectedBoss or not BossList[SelectedBoss] then
                        continue
                    end

                    -- Checa se o boss está spawnado
                    local Enemy = BossList[SelectedBoss]()
                    if not Enemy or not Enemy:FindFirstChild("Humanoid") or not Enemy:FindFirstChild("HumanoidRootPart") then
                        continue
                    end

                    local Humanoid = Enemy.Humanoid
                    local HumanoidRootPart = Enemy.HumanoidRootPart

                    -- Só farma se o boss tiver vida
                    if Humanoid.Health > 0 then
                        if _ENV.BringMob then
                            brnge(Enemy.Name, HumanoidRootPart.CFrame)
                        end

                        -- Apenas locomoção suave, sem teleporte instantâneo
                        local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(0, FarmHeight, 0) * CFrameAngle
                        tepe(targetCFrame)

                        faz({Enemy})
                        d()
                    end
                end
            end)
        end
    end
})





local HttpService = game:GetService("HttpService")
local SetClipboard = setclipboard or toclipboard -- função universal

-- Função de cópia de URL
local function copiarURL(url)
    if SetClipboard then
        SetClipboard(url)
    end
    -- Notificação usando Fluent
    Fluent:Notify({
        Title = "Copiado!",
        Content = "O link foi copiado para a área de transferência.",
        Duration = 3 -- segundos
    })
end

-- Exemplo de botão
Tabs.discord:AddButton({
    Title = "Pegar Link do Discord",
    Callback = function()
        copiarURL("https://discord.gg/MFn7N7vvdN")
    end
})


-- // Serviços
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer

-- // Lista de teclas
local skillKeys = { "Z", "X", "V", "B", "E", "C" }

-- // Tabela de configurações
local selectedKeys = {}
local autoSkillsEnabled = false

-- // Seção no Fluent UI
local section = Tabs.Main:AddSection("Auto Skills")

-- Dropdown para cada tecla
for _, key in ipairs(skillKeys) do
    section:AddDropdown(key.."Dropdown", {
        Title = "Ativar tecla "..key,
        Values = { "Sim", "Não" },
        Multi = false,
        Default = "Não",
        Callback = function(value)
            selectedKeys[key] = (value == "Sim")
        end
    })
end

-- Toggle principal
section:AddToggle("AutoSkillsToggle", {
    Title = "Ativar Auto Skills",
    Default = false,
    Callback = function(value)
        autoSkillsEnabled = value
    end
})

-- Loop para pressionar teclas
task.spawn(function()
    while task.wait(0.1) do
        if autoSkillsEnabled then
            for _, key in ipairs(skillKeys) do
                if selectedKeys[key] then
                    VirtualInputManager:SendKeyEvent(true, key, false, game)
                    task.wait(0.05)
                    VirtualInputManager:SendKeyEvent(false, key, false, game)
                end
            end
        end
    end
end)



  Fluent:Notify({
        Title = "Aviso!!!",
        Content = "Caso tenha bugs entre em nosso discord e reporte o bug la!!",
        Duration = 10 -- Set to nil to make the notification not disappear
    })


Tabs.Main:AddSection("Config")
local ToolDropdown = Tabs.Main:AddDropdown("ToolDropdown", {
    Title = "Selecione Melee e etc",
    Values = {},
    Multi = false,
    Default = nil
})
local ToolToggle = Tabs.Main:AddToggle("ToolToggle", {
    Title = "Equipar item de farm automaticamente",
    Default = false
})
local equipping = false
local function EquipSelectedTool()
    if not ToolToggle.Value then
        return
    end
    if equipping then
        return
    end
    equipping = true
    local selectedTool = ToolDropdown.Value
    if selectedTool then
        local tool = Player.Backpack:FindFirstChild(selectedTool)
        if tool and Player.Character and Player.Character:FindFirstChild("Humanoid") then
            pcall(function()
                Player.Character.Humanoid:EquipTool(tool)
            end)
        end
    end
    equipping = false
end
Player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    if ToolToggle.Value then
        task.wait(1)
        EquipSelectedTool()
    end
end)
ToolToggle:OnChanged(function(Value)
    if Value then
        coroutine.wrap(function()
            while ToolToggle.Value do
                EquipSelectedTool()
                task.wait(0.1)
            end
        end)()
    else
        if Player.Character then
            local currentTool = Player.Character:FindFirstChildOfClass("Tool")
            if currentTool then
                currentTool.Parent = Player.Backpack
            end
        end
    end
end)
local function RefreshTools()
    local tools = {}
    if Player and Player:FindFirstChild("Backpack") then
        for _, tool in ipairs(Player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(tools, tool.Name)
            end
        end
    end
    ToolDropdown:SetValues(tools)
end
local RefreshButton = Tabs.Main:AddButton({
    Title = "Recarregar",
    Callback = RefreshTools
})
task.spawn(function()
    task.wait(2)
    RefreshTools()
end)
Tabs.Main:AddSection("Auto Stats")
local StatDropdown = Tabs.Main:AddDropdown("StatDropdown", {
    Title = "Selecione onde colocar pontos",
    Values = {
        "Soco",
        "Vida",
        "Espada",
        "Arma",
        "Fruta"
    },
    Multi = false,
    Default = "Soco",
    Callback = function(Value)
        Settings.SelectedStat = Value
    end
})
local AutoStatsToggle = Tabs.Main:AddToggle("AutoStatsToggle", {
    Title = "Auto Stats Selecionado",
    Default = false,
    Callback = function(Value)
        Settings.AutoStats = Value
        if Value then
            coroutine.wrap(function()
                while Settings.AutoStats do
                    local remote = ReplicatedStorage.BetweenSides.Remotes.Events.StatsEvent
                    if remote then
                        local args = {
                            "UpgradeStat",
                            {
                                Defense = Settings.SelectedStat == "Vida" and 1 or 0,
                                Sword = Settings.SelectedStat == "Espada" and 1 or 0,
                                Gun = Settings.SelectedStat == "Arma" and 1 or 0,
                                Strength = Settings.SelectedStat == "Soco" and 1 or 0,
                                DevilFruit = Settings.SelectedStat == "Fruta" and 1 or 0
                            }
                        }
                        pcall(function()
                            remote:FireServer(unpack(args))
                        end)
                    end
                    task.wait(0.1)
                end
            end)()
        end
    end
})

local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
local fireTouchEnabled = false
local function fireTouch(part)
    if not fireTouchEnabled or not part:IsA("BasePart") then
        return
    end
    for _, ti in ipairs(part:GetChildren()) do
        if ti:IsA("TouchTransmitter") then
            for _, myPart in ipairs(char:GetDescendants()) do
                if myPart:IsA("BasePart") then
                    firetouchinterest(myPart, part, 0)
                    task.wait()
                    firetouchinterest(myPart, part, 1)
                end
            end
        end
    end
end
Tabs.Misc:AddSection("Teleportes")
local islands = {}
local map = workspace:FindFirstChild("Map")
if map then
    for _, island in ipairs(map:GetChildren()) do
        if island:FindFirstChild("Base") then
            table.insert(islands, island.Name)
        end
    end
end

local IslandDropdown = Tabs.Misc:AddDropdown("IslandDropdown", {
    Title = "Selecione a ilha",
    Values = islands,
    Multi = false,
    Default = islands[1] or nil
})

Tabs.Misc:AddButton({
    Title = "Teleportar Para Ilha",
    Callback = function()
        local selectedIsland = IslandDropdown.Value
        if selectedIsland and map then
            local island = map:FindFirstChild(selectedIsland)
            if island and island:FindFirstChild("Base") then
                local base = island.Base
                local targetCFrame

                if base:FindFirstChild("HumanoidRootPart") then
                    targetCFrame = base.HumanoidRootPart.CFrame
                else
                    targetCFrame = CFrame.new(base.WorldPivot.Position + Vector3.new(0, 5, 0))
                end

                -- Chama o teleporte corrigido
                tepe(targetCFrame)
            end
        end
    end
})


Tabs.Misc:AddSection("Farm Baú")
Tabs.Misc:AddToggle("FireTouchToggle", {
    Title = "Auto baú e fruta Spawnadas",
    Default = false,
    Callback = function(value)
        fireTouchEnabled = value
        if value then
            for _, v in ipairs(workspace:GetDescendants()) do
                fireTouch(v)
            end
        end
    end
})

-- Tabela com todos os NPCs e suas informações
local NPCs = {
    ["Vendedor de Frutas"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Foosha Village"]["Fruit Dealer (Foosha Village)"],
        npcName = "Fruit Dealer (Foosha Village)"
    },
    ["Vendedor de Haki de Armamento"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Frost Island"]["Aura Teacher"],
        npcName = "Aura Teacher"
    },
    ["Vendedor do DarkStep"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Orange Town"]["Dark Step Teacher"],
        npcName = "Dark Step Teacher"
    },
    ["Vendedor do Water Kung-Fu"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Sharkman Park"]["Water Kung-Fu Teacher"],
        npcName = "Water Kung-Fu Teacher"
    },
    ["Vendedor do Estilo Electric"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Skypie Upper"]["Eletric Teacher"],
        npcName = "Eletric Teacher"
    },
    ["Vendedor do Haki da Visão"] = {
        path = workspace.IgnoreList.Int.NPCs.Shops["Skypie Upper"]["Instinct Teacher"],
        npcName = "Instinct Teacher"
    },
    ["Sword Dealer (Foosha Village)"] = {
    path = workspace.IgnoreList.Int.NPCs.Shops["Foosha Village"]["Sword Dealer (Foosha Village)"],
    npcName = "Sword Dealer (Foosha Village)"
},
["Rare Sword Dealer"] = {
    path = workspace.IgnoreList.Int.NPCs.Shops["Orange Town"]["Rare Sword Dealer"],
    npcName = "Rare Sword Dealer"
},
["Master Sword Dealer"] = {
    path = workspace.IgnoreList.Int.NPCs.Shops["Skypie Down"]["Master Sword Dealer"],
    npcName = "Master Sword Dealer"
},
}
-- Função universal para teleportar e interagir com NPCs
local function teleportarParaNPC(npcData)
    local NPC = npcData.path
    if NPC and NPC.PrimaryPart then
        local npcPosition = NPC.PrimaryPart.Position
        local player = game.Players.LocalPlayer
        local character = player.Character

        -- Teleporta se estiver longe
        if character and character:FindFirstChild("HumanoidRootPart") then
            local distance = (npcPosition - character.HumanoidRootPart.Position).Magnitude
            if distance > 10 then
                local targetCFrame = NPC.PrimaryPart.CFrame * CFrame.new(0, 0, 3)
                tepe(targetCFrame)
                task.wait(2)
            end
        end

        -- Interage com o NPC
        local success, result = pcall(function()
            DialogueEvent:FireServer("TalkToNpc", {
                ["NpcName"] = npcData.npcName
            })
        end)

        if success then
            print("Interação com " .. npcData.npcName .. " foi iniciada!")
        else
            warn("Falha ao tentar interagir com " .. npcData.npcName)
        end
    else
        warn(npcData.npcName .. " não encontrado!")
    end
end

-- Criando o dropdown
Tabs.Misc:AddSection("Teleporte para NPCs")
Tabs.Misc:AddDropdown("NPCDropdown", {
    Title = "Selecione um NPC",
    Values = {
        "Vendedor de Frutas",
        "Vendedor de Haki de Armamento",
        "Vendedor do DarkStep",
        "Vendedor do Water Kung-Fu",
        "Vendedor do Estilo Electric",
        "Vendedor do Haki da Visão",
        "Sword Dealer (Foosha Village)",
        "Rare Sword Dealer",
        "Master Sword Dealer",
    },
    Multi = false,
    Default = 1,
    Callback = function(Value)
        local npcData = NPCs[Value]
        if npcData then
            teleportarParaNPC(npcData)
        else
            warn("NPC não encontrado na lista!")
        end
    end
})

Tabs.Misc:AddSection("Sea Event")
Tabs.Misc:AddToggle("FireTouchToggle", {
      Title = "Ilha do Sea Beast (wait 2 - 4 min)",
        Description = "Teleporta para a ilha do Sea Beast enquanto ativo",
        Default = false,
        Callback = function(state)
            if state then
                tepe(CFrame.new(4321, 8, 9599))
            end
        end
    })



Tabs.Server:AddSection("Server Options")

Tabs.Server:AddToggle("Auto Hop Server", {
    Title = "Auto Hop Server",
    Default = false,
    Callback = function(value)
        if value then
            -- Função para fazer o hop de servidor
            local function hopToNewServer()
                local TeleportService = game:GetService("TeleportService")
                local HttpService = game:GetService("HttpService")
                
                -- Tentar encontrar um servidor com vaga
                local success, servers = pcall(function()
                    local response = HttpService:JSONDecode(game:HttpGetAsync(
                        "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
                    ))
                    return response.data
                end)
                
                if success and servers then
                    local availableServers = {}
                    for _, server in ipairs(servers) do
                        if server.playing < server.maxPlayers and server.id ~= game.JobId then
                            table.insert(availableServers, server.id)
                        end
                    end
                    
                    if #availableServers > 0 then
                        local randomServer = availableServers[math.random(1, #availableServers)]
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer)
                    else
                        TeleportService:Teleport(game.PlaceId)
                    end
                else
                    TeleportService:Teleport(game.PlaceId)
                end
            end
            
            -- Executa o hop imediatamente quando ativado
            hopToNewServer()
            
            -- Conecta para continuar hopping enquanto o toggle estiver ativo
            spawn(function()
                while wait(5) and _ENV.AutoHopEnabled do
                    hopToNewServer()
                end
            end)
        else
            -- Desativa o auto hop
            _ENV.AutoHopEnabled = false
        end
    end
})


SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:BuildInterfaceSection(Tabs.SettingsTab)
SaveManager:BuildConfigSection(Tabs.SettingsTab)
Window:SelectTab(1)
