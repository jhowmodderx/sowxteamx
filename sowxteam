-- Ghost Gui UI Library
loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/UI-Library/refs/heads/main/Ghost%20Gui'))()
game.CoreGui.GhostGui.MainFrame.Title.Text = "Vox Seas Script SOWxTEAM - Auto Farm"

-- Função AddContent
AddContent("TextButton", "Auto Farm", [[
    -- Código para iniciar o Auto Farm
    _ENV.OnFarm = true
    task.spawn(function()
        while task.wait(Settings.dSpeed) and _ENV.OnFarm do
            -- Lógica de Auto Farm
            local CurrentQuest = a()
            if not CurrentQuest then continue end
            if not ten(CurrentQuest.Target) then
                ete(CurrentQuest.NpcName, CurrentQuest.Id)
                continue
            end
            local Enemy = clst(CurrentQuest.Target)
            if not Enemy then continue end
            CurrentTarget = Enemy
            local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
            local Humanoid = Enemy:FindFirstChild("Humanoid")
            if HumanoidRootPart and Humanoid and Humanoid.Health > 0 then
                -- Se "Bring Mob" estiver ativado, traga o mob para perto
                if _ENV.BringMob then
                    brnge(CurrentQuest.Target, HumanoidRootPart.CFrame)
                end
                -- Teleporta o jogador para o mob
                local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(0, 7.5, 0) * CFrame.Angles(math.rad(-90), 0, 0)
                if not tepe(targetCFrame) then
                    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                        Player.Character.HumanoidRootPart.CFrame = targetCFrame
                    end
                end
                task.wait(0)
                -- Atacar inimigos da quest
                local AllQuestEnemies = pgaall(CurrentQuest.Target)
                if #AllQuestEnemies > 0 then
                    faz(AllQuestEnemies)
                end
                -- Ativa o ataque do personagem
                d()
            end
        end
    end)
]])

-- Caixa de texto para o Quest
TextBox = AddContent("TextBox", "Texto do Quest:")
TextBox:GetPropertyChangedSignal("Text"):Connect(function()
    print("Texto da Quest: " .. TextBox.Text)
end)

-- Toggle para AutoStats
AddContent("Toogle", "Ativar AutoStats", [[
    -- Ativa a melhoria automática de stats
    Settings.AutoStats = true
    while Settings.AutoStats do
        local remote = ReplicatedStorage.BetweenSides.Remotes.Events.StatsEvent
        if remote then
            local args = {
                "UpgradeStat",
                {
                    Strength = Settings.SelectedStat == "Stamina" and 1 or 0,
                    Defense = Settings.SelectedStat == "Vida" and 1 or 0,
                    Sword = Settings.SelectedStat == "Espada" and 1 or 0,
                    Gun = Settings.SelectedStat == "Armas" and 1 or 0,
                    DevilFruit = Settings.SelectedStat == "Frutas" and 1 or 0
                }
            }
            pcall(function()
                remote:FireServer(unpack(args))
            end)
        end
        task.wait(0.1)
    end
]])

-- Switch para Bring Mob (Quest)
AddContent("Switch", "Juntar Todos os NPC (Quest)", [[
    -- Alterna a funcionalidade de trazer o mob para o jogador.
    _ENV.BringMob = not _ENV.BringMob
    if _ENV.BringMob then
        -- Adicione a lógica de trazer o mob
        brnge(CurrentQuest.Target, Enemy.HumanoidRootPart.CFrame)
    end
]])

-- Função para verificar se o jogador está vivo
local function c(Character)
    if Character then
        local Humanoid = Character:FindFirstChildOfClass("Humanoid")
        return Humanoid and Humanoid.Health > 0
    end
end

-- Função para verificar a distância entre o jogador e o inimigo
local function clst(EnemyName)
    local AllEnemies = pgaall(EnemyName)
    if #AllEnemies == 0 then
        return nil
    end
    local ClosestEnemy = nil
    local ShortestDistance = math.huge
    for i, Enemy in ipairs(AllEnemies) do
        if Enemy and Enemy.Parent then
            local RootPart = Enemy:FindFirstChild("HumanoidRootPart")
            local Humanoid = Enemy:FindFirstChild("Humanoid")
            if RootPart and Humanoid and Humanoid.Health > 0 then
                local Distance = Player:DistanceFromCharacter(RootPart.Position)
                if Distance < ShortestDistance then
                    ShortestDistance = Distance
                    ClosestEnemy = Enemy
                end
            end
        end
    end
    return ClosestEnemy
end

-- Função para a lógica de atacar o inimigo
local function faz(Enemies)
    local CurrentTime = workspace:GetServerTimeNow()
    CombatEvent:FireServer("DealDamage", {
        CallTime = CurrentTime,
        DelayTime = 0,
        Combo = 1,
        Results = Enemies,
        Damage = math.random(50, 150),
        CriticalHit = math.random(1, 10) <= 3
    })
end

-- Função para teletransportar o jogador
local function tepe(TargetCFrame)
    while not Player.Character or not c(Player.Character) do
        task.wait(1)
        if not _ENV.OnFarm then
            return false
        end
    end
    if not Player.Character or not Player.Character.PrimaryPart then
        return false
    end
    local Character = Player.Character
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    local PrimaryPart = Character.PrimaryPart
    if not Humanoid or not PrimaryPart then
        return false
    end
    local teleportPosition = TargetCFrame.Position
    local currentPosition = PrimaryPart.Position
    local Distance = (currentPosition - teleportPosition).Magnitude
    if Distance < 20 then
        PrimaryPart.CFrame = TargetCFrame
        return true
    end
    -- Teleportação suave com animação
    local tween = TweenCreator.new(PrimaryPart, Distance / Settings.TweenSpeed, "CFrame", TargetCFrame)
    return true
end

-- Função para ativar ataque com a ferramenta equipada
local function d()
    if not c(Player.Character) then
        return
    end
    local Tool = Player.Character:FindFirstChildOfClass("Tool")
    if not Tool then
        return
    end
    local CurrentTime = workspace:GetServerTimeNow()
    pcall(function()
        Tool:Activate()
        local Handle = Tool:FindFirstChild("Handle")
        if Handle then
            if Handle:FindFirstChild("Cooldown") then
                Handle.Cooldown.Value = 0
            end
            if Handle:FindFirstChild("AttackCooldown") then
                Handle.AttackCooldown.Value = 0
            end
            if Handle:FindFirstChild("Debounce") then
                Handle.Debounce.Value = false
            end
            local Sound = Handle:FindFirstChildOfClass("Sound")
            if Sound then
                Sound:Play()
            end
        end
        ToolEvent:FireServer("Effects", 1)
        ToolEvent:FireServer("Activate", 1)
    end)
end

-- Função para interagir com a interface de ferramentas
local ToolDropdown = Tabs.Main:AddDropdown("ToolDropdown", {
    Title = "Selecione a Ferramenta",
    Values = {},
    Multi = false,
    Default = nil
})

-- Função para atualizar a lista de ferramentas
local function RefreshTools()
    local tools = {}
    if Player and Player:FindFirstChild("Backpack") then
        for _, tool in ipairs(Player.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(tools, tool.Name)
            end
        end
    end
    ToolDropdown:SetValues(tools)
end

-- Botão para atualizar as ferramentas
local RefreshButton = Tabs.Main:AddButton({
    Title = "Recarregar Ferramentas",
    Callback = RefreshTools
})

-- Chamada para inicializar a lista de ferramentas
task.spawn(function()
    task.wait(2)
    RefreshTools()
end)

-- Salvando as configurações
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:BuildInterfaceSection(Tabs.SettingsTab)
SaveManager:BuildConfigSection(Tabs.SettingsTab)

-- Selecione a primeira guia
Window:SelectTab(1)
