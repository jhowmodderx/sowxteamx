local _ENV = (getgenv or getrenv or getfenv)()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local DialogueEvent = ReplicatedStorage.BetweenSides.Remotes.Events.DialogueEvent
local CombatEvent = ReplicatedStorage.BetweenSides.Remotes.Events.CombatEvent
local ToolEvent = ReplicatedStorage.BetweenSides.Remotes.Events.ToolsEvent
local QuestsNpcs = workspace.IgnoreList.Int.NPCs.Quests
local Enemys = workspace.Playability.Enemys
local QuestsDecriptions = require(ReplicatedStorage.MainModules.Essentials.QuestDescriptions)
local EnemiesFolders = {}
local CFrameAngle = CFrame.Angles(math.rad(- 90), 0, 0)

-- Função de tema claro (branco) com texto preto
local function setLightTheme()
    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local Window = Fluent:CreateWindow({
        Title = "SOWxTEAM By RodrigoGTyx",
        SubTitle = "by RodrigoGTyx",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = false,
        Theme = "Light",  -- Tema Claro
        MinimizeKey = Enum.KeyCode.LeftShift
    })
    
    -- Adicionando a logo com o ID fornecido
    Window:SetLogo("rbxassetid://78127779035849")  -- Logo personalizada
    
    local Tabs = {
        Main = Window:AddTab({
            Title = "Main",
            Icon = "rbxassetid://131580529707278"
        }),
        Misc = Window:AddTab({
            Title = "Misc",
            Icon = "rbxassetid://139867952423882"
        }),
        SettingsTab = Window:AddTab({
            Title = "Settings",
            Icon = "rbxassetid://113400358595552"
        })
    }

    -- Definir a tecla Alt para abrir/fechar a GUI
    local isOpen = true
    local UIS = game:GetService("UserInputService")
    UIS.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == Enum.KeyCode.LeftAlt then
                isOpen = not isOpen
                Window.Visible = isOpen
            end
        end
    end)

    -- Seção de teleporte entre jogadores
    Tabs.Main:AddSection("Teleport to Player")
    local PlayerDropdown = Tabs.Main:AddDropdown("PlayerDropdown", {
        Title = "Select Player",
        Values = {}, -- Lista de jogadores
        Multi = false,
        Default = nil
    })
    Tabs.Main:AddButton({
        Title = "Teleport to Selected Player",
        Callback = function()
            local selectedPlayerName = PlayerDropdown.Value
            local selectedPlayer = Players:FindFirstChild(selectedPlayerName)
            if selectedPlayer and selectedPlayer.Character then
                local targetCFrame = selectedPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
                if targetCFrame then
                    Player.Character.HumanoidRootPart.CFrame = targetCFrame
                end
            end
        end
    })

    -- Função para atualizar a lista de jogadores
    local function updatePlayerList()
        local playerNames = {}
        for _, p in ipairs(Players:GetPlayers()) do
            if p.Name ~= Player.Name then
                table.insert(playerNames, p.Name)
            end
        end
        PlayerDropdown:SetValues(playerNames)
    end
    -- Atualizar a lista ao iniciar
    updatePlayerList()
    -- Atualizar a lista a cada vez que um jogador entra ou sai
    Players.PlayerAdded:Connect(updatePlayerList)
    Players.PlayerRemoved:Connect(updatePlayerList)

    -- Seção de "Auto Farm"
    Tabs.Main:AddSection("Auto Farm")
    Tabs.Main:AddToggle("AutoFarm", {
        Title = "Auto Farm With Quests",
        Default = false,
        Callback = function(Value)
            _ENV.OnFarm = Value
            if Value then
                task.spawn(function()
                    while task.wait(Settings.dSpeed) and _ENV.OnFarm do
                        if not c(Player.Character) then
                            repeat
                                task.wait(0.5)
                            until c(Player.Character)
                            task.wait(0.2)
                            continue
                        end
                        local CurrentQuest = a()
                        if not CurrentQuest then
                            continue
                        end
                        if not ten(CurrentQuest.Target) then
                            ete(CurrentQuest.NpcName, CurrentQuest.Id)
                            continue
                        end
                        local Enemy = clst(CurrentQuest.Target)
                        if not Enemy then
                            continue
                        end
                        CurrentTarget = Enemy
                        local HumanoidRootPart = Enemy:FindFirstChild("HumanoidRootPart")
                        local Humanoid = Enemy:FindFirstChild("Humanoid")
                        if HumanoidRootPart and Humanoid and Humanoid.Health > 0 then
                            if _ENV.BringMob then
                                brnge(CurrentQuest.Target, HumanoidRootPart.CFrame)
                            end
                            local targetCFrame = HumanoidRootPart.CFrame * CFrame.new(0, 7.5, 0) * CFrameAngle
                            -- Melhorando o teleporte para evitar o travamento
                            if not tepe(targetCFrame) then
                                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                                    Player.Character.HumanoidRootPart.CFrame = targetCFrame
                                end
                            end
                            task.wait(0)
                            local AllQuestEnemies = pgaall(CurrentQuest.Target)
                            if # AllQuestEnemies > 0 then
                                faz(AllQuestEnemies)
                            end
                            d()
                        end
                    end
                end)
            end
        end
    })
    Tabs.Main:AddToggle("BringMob", {
        Title = "Bring Mob (Current Quest)",
        Default = false,
        Callback = function(Value)
            _ENV.BringMob = Value
        end
    })

    -- Função para atualização de ferramentas
    local ToolDropdown = Tabs.Main:AddDropdown("ToolDropdown", {
        Title = "Select Tool",
        Values = {},
        Multi = false,
        Default = nil
    })
    local ToolToggle = Tabs.Main:AddToggle("ToolToggle", {
        Title = "Auto Equip Tool",
        Default = false
    })
    local equipping = false
    local function EquipSelectedTool()
        if not ToolToggle.Value then
            return
        end
        if equipping then
            return
        end
        equipping = true
        local selectedTool = ToolDropdown.Value
        if selectedTool then
            local tool = Player.Backpack:FindFirstChild(selectedTool)
            if tool and Player.Character and Player.Character:FindFirstChild("Humanoid") then
                pcall(function()
                    Player.Character.Humanoid:EquipTool(tool)
                end)
            end
        end
        equipping = false
    end
    Player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        if ToolToggle.Value then
            task.wait(1)
            EquipSelectedTool()
        end
    end)
    ToolToggle:OnChanged(function(Value)
        if Value then
            coroutine.wrap(function()
                while ToolToggle.Value do
                    EquipSelectedTool()
                    task.wait(0.1)
                end
            end)()
        else
            if Player.Character then
                local currentTool = Player.Character:FindFirstChildOfClass("Tool")
                if currentTool then
                    currentTool.Parent = Player.Backpack
                end
            end
        end
    end)
    local function RefreshTools()
        local tools = {}
        if Player and Player:FindFirstChild("Backpack") then
            for _, tool in ipairs(Player.Backpack:GetChildren()) do
                if tool:IsA("Tool") then
                    table.insert(tools, tool.Name)
                end
            end
        end
        ToolDropdown:SetValues(tools)
    end
    local RefreshButton = Tabs.Main:AddButton({
        Title = "Refresh Tools",
        Callback = RefreshTools
    })
    task.spawn(function()
        task.wait(2)
        RefreshTools()
    end)

    -- Seção de "Auto Stats"
    Tabs.Main:AddSection("Auto Stats")
    local StatDropdown = Tabs.Main:AddDropdown("StatDropdown", {
        Title = "Select Stat to Upgrade",
        Values = {
            "Strength",
            "Defense",
            "Sword",
            "Gun",
            "DevilFruit"
        },
        Multi = false,
        Default = "Strength",
        Callback = function(Value)
            Settings.SelectedStat = Value
        end
    })
    local AutoStatsToggle = Tabs.Main:AddToggle("AutoStatsToggle", {
        Title = "Auto Stats Selected",
        Default = false,
        Callback = function(Value)
            Settings.AutoStats = Value
            if Value then
                coroutine.wrap(function()
                    while Settings.AutoStats do
                        local remote = ReplicatedStorage.BetweenSides.Remotes.Events.StatsEvent
                        if remote then
                            local args = {
                                "UpgradeStat",
                                {
                                    Defense = Settings.SelectedStat == "Defense" and 1 or 0,
                                    Sword = Settings.SelectedStat == "Sword" and 1 or 0,
                                    Gun = Settings.SelectedStat == "Gun" and 1 or 0,
                                    Strength = Settings.SelectedStat == "Strength" and 1 or 0,
                                    DevilFruit = Settings.SelectedStat == "DevilFruit" and 1 or 0
                                }
                            }
                            pcall(function()
                                remote:FireServer(unpack(args))
                            end)
                        end
                        task.wait(0.1)
                    end
                end)()
            end
        end
    })

    -- Função de toque para caixas ou frutas
    Tabs.Misc:AddSection("Others")
    Tabs.Misc:AddToggle("FireTouchToggle", {
        Title = "Auto Chest And Fruit Spawned",
        Default = false,
        Callback = function(value)
            fireTouchEnabled = value
            if value then
                for _, v in ipairs(workspace:GetDescendants()) do
                    fireTouch(v)
                end
            end
        end
    })
end

setLightTheme()  -- Chama a função para configurar o tema, logo e funcionalidade de "Alt"
